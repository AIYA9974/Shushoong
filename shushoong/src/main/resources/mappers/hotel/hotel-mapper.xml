<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kh.mclass.shushoong.hotel.model.repository.HotelRepository">

	<!-- hotel_main에서 가장 많이 찾은 숙소 표시용 SQL문 -->
	<select id="selectHotHotelList" resultType="HotelDtoRes">
		select hotel_code, hotel_name, to_char(hotel_price, '999,999,999') as hotel_price, room_discount, hotel_pic
		from V_hotel_list
		<!-- where SUBSTR(hotel_code, 1, 1) = #{countrycode} -->
		order by hotel_pcount desc
	</select>
	
<!-- 검색한 호텔 리스트 띄우기 위한 SQL  -->
	<!-- 호텔 이름, 영어이름, 주소, 최저가(인원수 고려), 사진 1장 -->
	<select id="selectAllHotelList" parameterType="hashmap" resultType="HotelDtoRes">
		select hotel_code, hotel_name, hotel_eng, hotel_address, to_char(hotel_price, '999,999,999') as hotel_price, room_discount, hotel_pic, hotel_score, hotel_review_num, rownum rn
		from V_hotel_list 
		where SUBSTR(hotel_code, 1, 3) = #{code} and room_cap &gt;= #{people}
        <if test="keyword != null and keyword !='' ">
        	<bind name="keyword2" value="'%' + keyword + '%'"/>
        	and hotel_name LIKE #{keyword2}
        </if>
        <if test="maxPrice != null and maxPrice !=''">
        	and hotel_price &lt;= ${maxPrice}
        </if>
        <if test="sortBy != null and sortBy !='' ">
	       	<choose>
	       		<when test="sortBy.equals('price')">
	       			ORDER BY hotel_price
	       		</when>
	       		<when test="sortBy.equals('review')">
	       			ORDER BY hotel_review_num
	       		</when>
	       		<when test="sortBy.equals('grade')">
	       			ORDER BY hotel_score
	       		</when>
	       	</choose>
	       	<choose>
				<when test="sortTo != null and sortTo.equals('desc')">
					DESC
				</when>
 				<when test="sortTo != null and sortTo.equals('asc')">
					ASC
				</when>
			</choose>
		</if>
	</select>
	
	<!-- 좋아요 누른 호텔 조회 -->
	<select id="selectLikeHotelList" parameterType="hashmap" resultType="String">
		select hotel_code from hotel_like where substr(hotel_code, 1, 3) = #{code} and user_id = #{userId}
	</select>
	
	<!-- 호텔 최고가(슬라이드바 표시용) -->
	<select id="selectMaxRoomlPrice" parameterType="hashmap" resultType="Integer">
            	select max(hotel_price) from V_hotel_list
            	where SUBSTR(hotel_code, 1, 3) = #{code} and room_cap &gt;= #{people}
            <if test="keyword != null and keyword !='' ">
	        	<bind name="keyword2" value="'%' + keyword + '%'"/>
	        	and hotel_name LIKE #{keyword2}
	        </if>
	</select>
	
	<!-- 좋아요 추가 -->
	<insert id="insertHotelLike" parameterType="hashmap">
		insert into hotel_like values (#{userId}, #{hotelCode})
	</insert>
	
	<!-- 좋아요 삭제 -->
	<insert id="deleteHotelLike" parameterType="hashmap">
		delete from hotel_like where user_id = #{userId} and hotel_code = #{hotelCode}
	</insert>
	
	<!-- 편의시설 -->
	<select id="selectHotelFacility" parameterType="String" resultType="HotelFacilityDtoRes">
		select * from hotel_facility where hotel_code = #{hotelCode}
	</select>
	
	<!-- 작성된 리뷰 불러오기 -->
	<select id="selectReviewDetailList" parameterType="hashmap" resultType="HotelReviewDto">
		select s2.* 
		from
		    (select s1.*, rownum rn 
		    from
		        (select hrv.user_id, tripper_cat, review_title, review_comment, SUBSTR(hotel_reserve_code, 1, 4) || '년 ' || SUBSTR(hotel_reserve_code, 5, 2) || '월 ' || SUBSTR(hotel_reserve_code, 7, 2) || '일' as review_date, 
			        ROUND((hotel_facility + hotel_clean + hotel_conven + hotel_kind)/4, 1) as rate_avg
			        from hotel_review hrv 
			            join hotel_reserve hrs using (hotel_reserve_code)
			        where hotel_code = #{hotelCode}
			            order by review_date desc) 
		    s1)
		s2
		WHERE RN BETWEEN #{startRounum} AND #{endRounum}
	</select>
	
	<!-- 리뷰 페이지 수 구하기 -->
	<select id="selectTotalPageCount"  parameterType="String" resultType="_int">
		select count(*) c from hotel_review
		    join hotel_reserve using(hotel_reserve_code)
		where hotel_code = #{hotelCode}
	</select>

	
	<!-- 호텔에 달린 모든 리뷰에 대한 평균 및 총 리뷰 갯수 -->
 	<select id="selectReviewOverall" parameterType="String" resultType="HotelReviewOverallDtoRes">
		select count(*) as review_count, NVL(ROUND(avg(hotel_facility), 1), 0) as avg_hotel_facility, NVL(ROUND(avg(hotel_clean), 1),0) as avg_hotel_clean, NVL(ROUND(avg(hotel_conven),1),0) as avg_hotel_conven, NVL(ROUND(avg(hotel_kind),1), 0) as avg_hotel_kind, 
		        NVL(ROUND((avg(hotel_facility) + avg(hotel_clean) + avg(hotel_conven) + avg(hotel_kind))/4, 1),0) as avg_all_rate
		from hotel_review
		    join hotel_reserve hr using (hotel_reserve_code)
		where hotel_code = #{hotelCode}
	</select>

	<!-- 호텔상세페이지 총 합친거 -->
	<resultMap type="HotelViewDtoRes" id="HotelViewDtoResMap">
	<!-- 밑에 select문에서 실행한 sql문의 column명이랑 dto의 변수명이랑 여기서 맞춰주기 -->
	<!-- 원래 mybatis가 알아서 dto명이랑 컬럼명 연결헀는데 dto 안에 List 형태 있으면 알아서 찾지 못해서
		우리가 하나하나 알려주는게 resultMap -->
		<id column="HOTEL_CODE" property="hotelCode"/>
		<!-- PK 나 unique 한 값 쓰기 - dto들을 구분하기 위해 필요(호텔마다 정보가 다 다르기 때문에..) -->
		<result column="HOTEL_NAME" property="hotelName"/>
		<result column="HOTEL_ENG" property="hotelEng"/>
		<result column="HOTEL_ADDRESS" property="hotelAddress"/>
		<result column="HOTEL_PRICE" property="hotelPrice"/>
		<result column="HOTEL_CALL" property="hotelCall"/>
		<result column="HOTEL_CHECK_IN" property="hotelCheckIn"/>
		<result column="HOTEL_CHECK_OUT" property="hotelCheckOut"/>
		<result column="HOTEL_INTRO" property="hotelIntro"/>
		<result column="HOTEL_POLICY" property="hotelPolicy"/>
		<result column="HOTEL_SAFETY" property="hotelSafety"/>
		<!-- HotelSearchDtoRes에 있는 공통부분 -->
		<collection ofType="HotelPic" property="hotelPic">
			<result column="HOTEL_PICTURE" property="hotelPicture"/>
		</collection>
		<collection ofType="HotelRoomDto" property="hotelRooms">		
			<result column="ROOM_CAT" property="roomCat"/>
			<result column="ROOM_CAT_DESC" property="roomCatDesc"/>
			<result column="HOTEL_PRICE" property="hotelPrice"/>
			<result column="HOTEL_DISCOUNT" property="hotelDiscount"/>
			<result column="ROOM_COUNT" property="roomCount"/>
			<result column="ROOM_CAP" property="roomCap"/>
			<result column="ROOM_ATT" property="roomAtt"/>
		</collection>
		<!-- HotelSearchDtoRes 안에 있는 list -->
		<!-- property - dto변수명, column - db에서 쓰는 컬럼명  -->
	</resultMap>
	<select id="selectOneHotel" parameterType="hashmap" resultMap="HotelViewDtoResMap">
		<!-- 매개변수가 여러개라서 hashmap -->
		select * from hotel
		    join hotel_pic using(hotel_code)
		    join v_room_list using(hotel_code)
		where hotel_code = #{hotelCode} and room_cap &gt;= #{people}
	</select>

	<!-- 결제 -->
	
</mapper>