<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kh.mclass.shushoong.airline.model.repository.AirlineRepository">
	<select id="selectAllList" parameterType="String" resultType="AirlineInfoDto">
		<choose>
			<when test="ticketType == 1">
			select a.*, TRUNC(s.seat_price / 2) as seat_price, s.seat_grade, s.airline_code, s.seat_total, s.seat_reserved, s.child_price, s.toddler_price 
			</when>
			<otherwise>
			SELECT *	
			</otherwise>
		</choose>
		FROM AIRLINE_INFO a 
		JOIN SEAT_GRADE s ON a.AIRLINE_CODE = s.AIRLINE_CODE
		WHERE DEPART_LOC LIKE #{departLoc} 
		AND ARRIVAL_LOC LIKE #{arrivalLoc}
		AND SEAT_GRADE = #{seatGrade}
    	ORDER BY SEAT_PRICE
	</select>
	
	<select id="getMaxPrice" parameterType="map" resultType="Integer">
	    <choose>
	        <when test="ticketType == 1">
	            SELECT (MAX(s.SEAT_PRICE) / 2) AS maxPrice
	        </when>
	        <otherwise>
	            SELECT MAX(s.SEAT_PRICE) AS maxPrice
	        </otherwise>
	    </choose>
	    FROM AIRLINE_INFO a
	    JOIN SEAT_GRADE s ON a.AIRLINE_CODE = s.AIRLINE_CODE
	    WHERE a.DEPART_LOC = #{departLoc} 
	    AND a.ARRIVAL_LOC = #{arrivalLoc}
	</select>

	
	<select id="selectOne" parameterType="String" resultType="AirlineInfoDto">
		SELECT * FROM AIRLINE_INFO a
		JOIN SEAT_GRADE s ON a.AIRLINE_CODE = s.AIRLINE_CODE
		WHERE a.AIRLINE_CODE LIKE #{airlineCode}
		<!-- 
		SELECT * FROM AIRLINE_INFO 
		WHERE AIRLINE_CODE LIKE #{airlineCode}
		 -->
	</select>
	
    <select id="selectOptions" parameterType="map" resultType="AirlineInfoDto">
   		<choose>
		<when test="ticketType == 1">
		SELECT * FROM (
    	SELECT 
        a.*, TRUNC(s.seat_price / 2) AS seat_price, s.seat_grade, s.seat_total, s.seat_reserved, s.child_price, s.toddler_price
        FROM AIRLINE_INFO a
        JOIN SEAT_GRADE s ON a.AIRLINE_CODE = s.AIRLINE_CODE
		)        
		</when>
		<otherwise>
		SELECT *
        FROM AIRLINE_INFO a
        JOIN SEAT_GRADE s ON a.AIRLINE_CODE = s.AIRLINE_CODE	
		</otherwise>
		</choose>
        WHERE TO_DATE(DEPART_TIME, 'HH24:MI') 
        BETWEEN TO_DATE(#{departTimeLeft}, 'HH24:MI') 
        AND TO_DATE(#{departTimeRight}, 'HH24:MI')
        AND TO_DATE (ARRIVAL_TIME, 'HH24:MI')
      	BETWEEN TO_DATE(#{arrivalTimeLeft}, 'HH24:MI')
      	AND TO_DATE(#{arrivalTimeRight}, 'HH24:MI')
        AND SEAT_PRICE BETWEEN 0 AND #{maxPrice}
        AND DEPART_LOC LIKE #{departLoc}
        AND ARRIVAL_LOC LIKE #{arrivalLoc}
        AND SEAT_GRADE = #{seatGrade}
    	<choose>
    		<when test="selectType != null and selectType.equals('flytime-low') and viaType.equals('direct')">
    			AND VIA_COUNT = 0 ORDER BY FLIGHT_TIME
    		</when>
    		<when test="selectType != null and selectType.equals('flytime-low') and viaType.equals('layover')">
    			AND VIA_COUNT = 1 ORDER BY FLIGHT_TIME
    		</when>
    		 <when test="selectType != null and selectType.equals('flytime-long') and viaType.equals('direct')">
    			AND VIA_COUNT = 0 ORDER BY FLIGHT_TIME DESC
    		</when>
    		 <when test="selectType != null and selectType.equals('flytime-long') and viaType.equals('layover')">
    			AND VIA_COUNT = 1 ORDER BY FLIGHT_TIME DESC
    		</when>
    		 <when test="selectType != null and selectType.equals('price-cheap') and viaType.equals('direct')">
    			AND VIA_COUNT = 0 ORDER BY SEAT_PRICE
    		</when>
    		 <when test="selectType != null and selectType.equals('price-cheap') and viaType.equals('layover')">
    			AND VIA_COUNT = 1 ORDER BY SEAT_PRICE
    		</when>
    		 <when test="selectType != null and selectType.equals('price-expensive') and viaType.equals('direct')">
    			AND VIA_COUNT = 0 ORDER BY SEAT_PRICE DESC
    		</when>
    		 <when test="selectType != null and selectType.equals('price-expensive') and viaType.equals('layover')">
    			AND VIA_COUNT = 1 ORDER BY SEAT_PRICE DESC
    		</when>
        </choose>
    </select>
    <!-- 돌아오는 비행기 -->
    <select id="selectOptionsReturn" parameterType="map" resultType="AirlineInfoDto">
		SELECT *
        FROM AIRLINE_INFO a
        JOIN SEAT_GRADE s ON a.AIRLINE_CODE = s.AIRLINE_CODE	
        WHERE TO_DATE(DEPART_TIME, 'HH24:MI') 
        BETWEEN TO_DATE(#{departTimeLeft}, 'HH24:MI') 
        AND TO_DATE(#{departTimeRight}, 'HH24:MI')
        AND TO_DATE (ARRIVAL_TIME, 'HH24:MI')
      	BETWEEN TO_DATE(#{arrivalTimeLeft}, 'HH24:MI')
      	AND TO_DATE(#{arrivalTimeRight}, 'HH24:MI')
        AND DEPART_LOC LIKE #{departLoc}
        AND ARRIVAL_LOC LIKE #{arrivalLoc}
        AND SEAT_GRADE = #{seatGrade}
    	<choose>
    		<when test="selectType != null and selectType.equals('flytime-low') and viaType.equals('direct')">
    			AND VIA_COUNT = 0 ORDER BY FLIGHT_TIME
    		</when>
    		<when test="selectType != null and selectType.equals('flytime-low') and viaType.equals('layover')">
    			AND VIA_COUNT = 1 ORDER BY FLIGHT_TIME
    		</when>
    		 <when test="selectType != null and selectType.equals('flytime-long') and viaType.equals('direct')">
    			AND VIA_COUNT = 0 ORDER BY FLIGHT_TIME DESC
    		</when>
    		 <when test="selectType != null and selectType.equals('flytime-long') and viaType.equals('layover')">
    			AND VIA_COUNT = 1 ORDER BY FLIGHT_TIME DESC
    		</when>
    		 <when test="selectType != null and selectType.equals('price-cheap') and viaType.equals('direct')">
    			AND VIA_COUNT = 0 ORDER BY SEAT_PRICE
    		</when>
    		 <when test="selectType != null and selectType.equals('price-cheap') and viaType.equals('layover')">
    			AND VIA_COUNT = 1 ORDER BY SEAT_PRICE
    		</when>
    		 <when test="selectType != null and selectType.equals('price-expensive') and viaType.equals('direct')">
    			AND VIA_COUNT = 0 ORDER BY SEAT_PRICE DESC
    		</when>
    		 <when test="selectType != null and selectType.equals('price-expensive') and viaType.equals('layover')">
    			AND VIA_COUNT = 1 ORDER BY SEAT_PRICE DESC
    		</when>
        </choose>
    </select>
	
	<insert id="insertReserverInfo" parameterType="AirlineReserverInfoDto" >
    	INSERT INTO AIRLINE_RESERVE_INFO (AIRLINE_RESERVE_CODE, USER_ID , RESERVE_PHONE, RESERVE_EMAIL, RESERVE_TIME)
    		VALUES (#{airlineReserveCode}||SEQ_AIRC.nextval , #{userId} , #{reservePhone} , #{reserveEmail}, default )
    </insert>
	    
    <select id="selectResCode" parameterType="AirlineReserverInfoDto" resultType="String">
	    SELECT AIRLINE_RESERVE_CODE
		FROM (
	    	SELECT AIRLINE_RESERVE_CODE 
	    		FROM AIRLINE_RESERVE_INFO
	    		WHERE USER_ID = #{resName}
	    			AND RESERVE_PHONE= #{phoneNum}
	    			AND RESERVE_EMAIL= #{email}
	    		ORDER BY RESERVE_TIME DESC
	    	)
		WHERE ROWNUM = 1
    </select>
    
    <update id="insertPassengerInfo" parameterType="map" useGeneratedKeys="false" >
   		<foreach collection="list" item="item" index="index" separator=" " open="INSERT ALL" close="SELECT * FROM DUAL" >
		    INTO passenger_info (AIRLINE_RESERVE_CODE,LAST_NAME, FIRST_NAME, GENDER, BIRTH, NATION, BAGGAGE, PASSPORT_CODE)
	    		VALUES(
	    			#{item.reserve_code},
	    			#{item.passenger_lastName},
	    			#{item.passenger_firstName},
	    			#{item.passenger_gender},
	    			#{item.passenger_birth},
	    			#{item.passenger_nation},
	    			#{item.baggage_size},
	    			#{item.passport_num}
	    		)
   		</foreach>
    </update>
    
    <select id="selectOneDomesticFunction" resultType="char">
    	SELECT DOMESTIC_FLIGHTS
    		FROM AIRLINE_INFO
    			WHERE AIRLINE_CODE = #{airlineCode}
    </select>
    
    <select id="selectOneReturnDomesticFunction" resultType="char">
    	SELECT DOMESTIC_FLIGHTS
    		FROM AIRLINE_INFO
    			WHERE AIRLINE_CODE = #{airlineCode}
    </select>
		   	
	<select id="selectOneAirlineInfo" resultType="AirlineInfoDto">
		SELECT * 
			FROM AIRLINE_INFO
				WHERE AIRLINE_CODE = #{airlineCode}
	</select>
	
</mapper>