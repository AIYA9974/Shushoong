<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kh.mclass.shushoong.airline.model.repository.AirlineRepository">
	<select id="selectAllList" parameterType="String" resultType="AirlineInfoDto">
		SELECT * FROM AIRLINE_INFO a 
		JOIN SEAT_GRADE s ON a.AIRLINE_CODE = s.AIRLINE_CODE
		WHERE DEPART_LOC LIKE #{departLoc} 
		AND ARRIVAL_LOC LIKE #{arrivalLoc}
    	ORDER BY SEAT_PRICE
	</select>
	
	<select id="getMaxPrice" parameterType="map" resultType="Integer">
	    SELECT MAX(s.SEAT_PRICE) AS maxPrice
	    FROM AIRLINE_INFO a
	    JOIN SEAT_GRADE s ON a.AIRLINE_CODE = s.AIRLINE_CODE
	    WHERE a.DEPART_LOC = #{departLoc} 
	    AND a.ARRIVAL_LOC = #{arrivalLoc}
	</select>
	
	<select id="selectOne" parameterType="String" resultType="AirlineInfoDto">
		SELECT * FROM AIRLINE_INFO a
		JOIN SEAT_GRADE s ON a.AIRLINE_CODE = s.AIRLINE_CODE
		WHERE a.AIRLINE_CODE LIKE #{airlineCode}
		<!-- 
		SELECT * FROM AIRLINE_INFO 
		WHERE AIRLINE_CODE LIKE #{airlineCode}
		 -->
	</select>
	
    <select id="selectOptions" parameterType="map" resultType="AirlineInfoDto">
        SELECT * FROM AIRLINE_INFO a
        JOIN SEAT_GRADE s ON a.AIRLINE_CODE = s.AIRLINE_CODE  
        WHERE TO_DATE(DEPART_TIME, 'HH24:MI') 
        BETWEEN TO_DATE(#{departTimeLeft}, 'HH24:MI') 
        AND TO_DATE(#{departTimeRight}, 'HH24:MI')
        AND TO_DATE (ARRIVAL_TIME, 'HH24:MI')
      	BETWEEN TO_DATE(#{arrivalTimeLeft}, 'HH24:MI')
      	AND TO_DATE(#{arrivalTimeRight}, 'HH24:MI')
        AND SEAT_PRICE BETWEEN 0 AND #{maxPrice}
        AND DEPART_LOC LIKE #{departLoc}
        AND ARRIVAL_LOC LIKE #{arrivalLoc}
    	<choose>
    		<when test="selectType != null and selectType.equals('flytime-low') and viaType.equals('direct')">
    			AND VIA_COUNT = 0 ORDER BY FLIGHT_TIME
    		</when>
    		<when test="selectType != null and selectType.equals('flytime-low') and viaType.equals('layover')">
    			AND VIA_COUNT = 1 ORDER BY FLIGHT_TIME
    		</when>
    		 <when test="selectType != null and selectType.equals('flytime-long') and viaType.equals('direct')">
    			AND VIA_COUNT = 0 ORDER BY FLIGHT_TIME DESC
    		</when>
    		 <when test="selectType != null and selectType.equals('flytime-long') and viaType.equals('layover')">
    			AND VIA_COUNT = 1 ORDER BY FLIGHT_TIME DESC
    		</when>
    		 <when test="selectType != null and selectType.equals('price-cheap') and viaType.equals('direct')">
    			AND VIA_COUNT = 0 ORDER BY SEAT_PRICE
    		</when>
    		 <when test="selectType != null and selectType.equals('price-cheap') and viaType.equals('layover')">
    			AND VIA_COUNT = 1 ORDER BY SEAT_PRICE
    		</when>
    		 <when test="selectType != null and selectType.equals('price-expensive') and viaType.equals('direct')">
    			AND VIA_COUNT = 0 ORDER BY SEAT_PRICE DESC
    		</when>
    		 <when test="selectType != null and selectType.equals('price-expensive') and viaType.equals('layover')">
    			AND VIA_COUNT = 1 ORDER BY SEAT_PRICE DESC
    		</when>
        </choose>
    </select>
    
    <insert id="insertReserverInfo" >
    	INSERT INTO AIRLINE_RESERVE_INFO (AIRLINE_RESERVE_CODE, USER_ID , RESERVE_PHONE, RESERVE_EMAIL)
    		VALUES (TO_CHAR(SYSDATE,'YYMIDD')||SEQ_AIRC.nextval , #{resName} , #{phoneNum} , #{email} )
    </insert>
    
    <select id="selectResCode" resultType="String">
    	SELECT AIRLINE_RESERVE_CODE 
    		FROM AIRLINE_RESERVE_INFO
    		WHERE USER_ID = #{resName}
    		AND RESERVE_PHONE= #{phoneNum}
    		AND RESERVE_EMAIL= #{email}
    </select>
    
    <update id="insertPassengerInfo" parameterType="map" useGeneratedKeys="false" >
   		<foreach collection="list" item="item" index="index" separator=" " open="INSERT ALL" close="SELECT * FROM DUAL" >
		    INTO passenger_info (AIRLINE_RESERVE_CODE,LAST_NAME, FIRST_NAME, GENDER, BIRTH, NATION, BAGGAGE, PASSPORT_CODE)
	    		VALUES(
	    			#{item.reserve_code},
	    			#{item.passenger_lastName},
	    			#{item.passenger_firstName},
	    			#{item.passenger_gender},
	    			#{item.passenger_birth},
	    			#{item.passenger_nation},
	    			#{item.baggage_size},
	    			#{item.passport_num}
	    		)
   		</foreach>
    </update>
    
		   	
	
</mapper>